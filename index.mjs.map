{"version":3,"file":"index.mjs","sources":["../lib/data.js","../lib/abs2.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable stdlib/capitalized-comments */\n\n'use strict';\n\n// MODULES //\n\nimport abs2 from '@stdlib/math-base-special-abs2' ;\nimport abs2f from '@stdlib/math-base-special-abs2f' ;\n\n\n// MAIN //\n\nvar data = [\n\t// NOTE: the following **must** match the order in `./types.json`. The order should be according to likelihood of use (e.g., if `float64` arrays are more likely, then `float64` types/data should come before `uint8`).\n\n\t// float64\n\tabs2,\n\tabs2,\n\n\t// float32\n\tabs2f,\n\tabs2,\n\tabs2,\n\n\t// generic\n\tabs2,\n\n\t// int32\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\n\t// int16\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\n\t// int8\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\n\t// uint32\n\tabs2,\n\tabs2,\n\tabs2,\n\n\t// uint16\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\n\t// uint8\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\n\t// uint8c\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2,\n\tabs2\n];\n\n\n// EXPORTS //\n\nexport default data;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dispatch from '@stdlib/strided-dispatch' ;\nimport unary from '@stdlib/strided-base-unary' ;\nimport resolve from '@stdlib/strided-base-dtype-resolve-enum' ;\nimport types from './types.json' ;\nimport meta from './meta.json' ;\nimport data from './data.js' ;\n\n\n// VARIABLES //\n\nvar fcn = dispatch( unary, types, data, meta.nargs, meta.nin, meta.nout );\n\n\n// MAIN //\n\n/**\n* Computes the squared absolute value for each element in a strided array `x` and assigns the results to elements in a strided array `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {*} dtypeX - `x` data type\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {*} dtypeY - `y` data type\n* @param {Collection} y - destination array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} third argument must be an array-like object\n* @throws {TypeError} fourth argument must be an integer\n* @throws {TypeError} sixth argument must be an array-like object\n* @throws {TypeError} seventh argument must be an integer\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {RangeError} third argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} sixth argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n* @returns {Collection} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* abs2( x.length, 'float64', x, 1, 'float64', y, 1 );\n* // y => <Float64Array>[ 4.0, 1.0, 9.0, 25.0, 16.0 ]\n*/\nfunction abs2( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n\treturn fcn( N, resolve( dtypeX ), x, strideX, resolve( dtypeY ), y, strideY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default abs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dispatch from '@stdlib/strided-dispatch' ;\nimport { ndarray as unary } from '@stdlib/strided-base-unary' ;\nimport resolve from '@stdlib/strided-base-dtype-resolve-enum' ;\nimport types from './types.json' ;\nimport meta from './meta.json' ;\nimport data from './data.js' ;\n\n\n// VARIABLES //\n\nvar fcn = dispatch( unary, types, data, meta.nargs+meta.nin+meta.nout, meta.nin, meta.nout ); // eslint-disable-line max-len\n\n\n// MAIN //\n\n/**\n* Computes the squared absolute value for each element in a strided array `x` and assigns the results to elements in a strided array `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {*} dtypeX - `x` data type\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {*} dtypeY - `y` data type\n* @param {Collection} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} third argument must be an array-like object\n* @throws {TypeError} fourth argument must be an integer\n* @throws {TypeError} fifth argument must be a nonnegative integer\n* @throws {TypeError} seventh argument must be an array-like object\n* @throws {TypeError} eighth argument must be an integer\n* @throws {TypeError} ninth argument must be a nonnegative integer\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {RangeError} third argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} seventh argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n* @returns {Collection} `y`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* abs2( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 );\n* // y => <Float64Array>[ 4.0, 1.0, 9.0, 25.0, 16.0 ]\n*/\nfunction abs2( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY ) {\n\treturn fcn( N, resolve( dtypeX ), x, strideX, offsetX, resolve( dtypeY ), y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default abs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport setProps from '@stdlib/strided-base-meta-data-props' ;\nimport meta from './meta.json' ;\nimport types from './types.json' ;\nimport abs2 from './abs2.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( abs2, 'ndarray', ndarray );\nsetProps( meta, types, abs2, false );\nsetProps( meta, types, abs2.ndarray, true );\n\n\n// EXPORTS //\n\nexport default abs2;\n"],"names":["data","abs2","abs2f","fcn","dispatch","unary","types","meta","nargs","nin","nout","N","dtypeX","x","strideX","dtypeY","y","strideY","resolve","offsetX","offsetY","setReadOnly","ndarray","setProps"],"mappings":";;q4BA8BIA,EAAO,CAIVC,EACAA,EAGAC,EACAD,EACAA,EAGAA,EAGAA,EACAA,EACAA,EACAA,EAGAA,EACAA,EACAA,EACAA,EACAA,EAGAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EAGAA,EACAA,EACAA,EAGAA,EACAA,EACAA,EACAA,EAGAA,EACAA,EACAA,EACAA,EACAA,EACAA,EAGAA,EACAA,EACAA,EACAA,EACAA,EACAA,GC5DGE,EAAMC,EAAUC,EAAOC,EAAON,EAAMO,EAAKC,MAAOD,EAAKE,IAAKF,EAAKG,MAoCnE,SAAST,EAAMU,EAAGC,EAAQC,EAAGC,EAASC,EAAQC,EAAGC,GAChD,OAAOd,EAAKQ,EAAGO,EAASN,GAAUC,EAAGC,EAASI,EAASH,GAAUC,EAAGC,EACrE,CCtCA,IAAId,EAAMC,EAAUC,EAAOC,EAAON,EAAMO,EAAKC,MAAMD,EAAKE,IAAIF,EAAKG,KAAMH,EAAKE,IAAKF,EAAKG,MAwCtF,SAAST,EAAMU,EAAGC,EAAQC,EAAGC,EAASK,EAASJ,EAAQC,EAAGC,EAASG,GAClE,OAAOjB,EAAKQ,EAAGO,EAASN,GAAUC,EAAGC,EAASK,EAASD,EAASH,GAAUC,EAAGC,EAASG,EACvF,CC1CAC,EAAApB,EAAA,UAAAqB,GACAC,EAAAhB,EAAAD,EAAAL,GAAA,GACAsB,EAAAhB,EAAAD,EAAAL,EAAAqB,SAAA"}